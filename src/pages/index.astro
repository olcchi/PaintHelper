---
import Layout from "../layouts/Layout.astro";
---

<Layout title="照片取色器">
  <main class="container flex-col justify-between h-100dvh mx-auto">
    <div
      class="relative flex items-center bg-warm-gray-100 h-14 border-b-solid border-b-warm-gray-200"
    >
      <input type="file" id="fileInput" accept="image/*" hidden />
      <p class="text-center fixed left-2 p-2 select-none text-black">取色器</p>
      <label
        class="fixed right-2 p-2 rounded-full bg-blue-600 text-white text-sm w-18 h-6 font-bold text-center cursor-pointer flex justify-center items-center"
        for="fileInput"
        class="upload-btn">上传照片</label
      >
    </div>
    <div class="image-container w-full h-50dvh! flex-col relative">
      <canvas class="w-full h-full" id="mainCanvas"></canvas>
      <canvas id="pickerCanvas" class="absolute left-0 top-0"></canvas>
      <canvas
        class="absolute top-1 right-1 w-24 h-24 z-20 duration-200 transition-all border-opacity-50 rounded-sm"
        id="zoomCanvas"></canvas>
    </div>

    <div class="relative w-full color-info flex items-center relative h-12">
      <div class="color-box w-full h-full"></div>
      <span
        class="color-value absolute right-0 text-white text-sm font-thin italic h-12 w-32 flex items-center justify-center"
        >#FFFFFF</span
      >
    </div>

    <div
      class="touchpad bg-warm-gray-100 border-solid border-t-warm-gray-200 h-35dvh flex items-center justify-center text-2xl text-gray-2 select-none"
    >
      触控区域
    </div>
  </main>
</Layout>

<script>
  let mainCanvas:HTMLCanvasElement|null, zoomCanvas:HTMLCanvasElement|null, pickerCanvas:HTMLCanvasElement|null;
  let mainCtx:CanvasRenderingContext2D|null, zoomCtx:CanvasRenderingContext2D|null, pickerCtx:CanvasRenderingContext2D|null;
  let sourceImage:ImageBitmap|null = null;
  let pickerPos = { x: 0, y: 0 };
  const colorValue = document.querySelector(".color-value");
  let isDragging = false;
  const dpr = window.devicePixelRatio || 1;

  // color inverse
  function getComplementaryColor(hexColor:string) {
    if (hexColor.startsWith("#")) {
      hexColor = hexColor.slice(1);
    }

    // check hex value
    if (hexColor.length !== 6) {
      throw new Error("error of hex value");
    }

    // get r, g, b value
    const r = parseInt(hexColor.slice(0, 2), 16);
    const g = parseInt(hexColor.slice(2, 4), 16);
    const b = parseInt(hexColor.slice(4, 6), 16);

    // calculate complementary color
    const complementaryR = 255 - r;
    const complementaryG = 255 - g;
    const complementaryB = 255 - b;

    // convert to hex
    const toHex = (value:any) => {
      const hex = value.toString(16);
      return hex.length === 1 ? "0" + hex : hex;
    };

    const complementaryHexR = toHex(complementaryR);
    const complementaryHexG = toHex(complementaryG);
    const complementaryHexB = toHex(complementaryB);

    // return hex color
    return "#" + complementaryHexR + complementaryHexG + complementaryHexB;
  }

  // init canvas
  function initCanvas() {
    mainCanvas = document.getElementById("mainCanvas") as HTMLCanvasElement;
    zoomCanvas = document.getElementById("zoomCanvas") as HTMLCanvasElement;
    pickerCanvas = document.getElementById("pickerCanvas") as HTMLCanvasElement;

    // config main canvas
    mainCtx = mainCanvas.getContext("2d", { willReadFrequently: true });
    mainCanvas.style.touchAction = "none";

    // config zoom canvas
    zoomCtx = zoomCanvas.getContext("2d");
    zoomCanvas.width = 50 * dpr;
    zoomCanvas.height = 50 * dpr;
    zoomCanvas.style.width = "100px";
    zoomCanvas.style.height = "100px";
    zoomCanvas.onclick = function () {
      if (zoomCanvas!.style.opacity === "0.25") zoomCanvas!.style.opacity = "1";
      else zoomCanvas!.style.opacity = "0.25";
    };

    // config picker canvas
    pickerCtx = pickerCanvas.getContext("2d");
    pickerCanvas.width = mainCanvas.width;
    pickerCanvas.height = mainCanvas.height;
    pickerCanvas.style.width = mainCanvas.style.width;
    pickerCanvas.style.height = mainCanvas.style.height;
  }

  // load image
  document.getElementById("fileInput")?.addEventListener("change", async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = async (event) => {
      const img = new Image();
      img.src = event.target!.result as any;

      await new Promise((resolve) => (img.onload = resolve));
      sourceImage = await createImageBitmap(img);

      const container = document.querySelector(".image-container");
      const containerWidth = container!.clientWidth;
      const containerHeight = container!.clientHeight;

      // config canvas real size
      mainCanvas!.width = containerWidth * 1 * dpr;
      mainCanvas!.height = containerHeight * 1 * dpr;
      mainCanvas!.style.width = `${containerWidth}px`;
      mainCanvas!.style.height = `${containerHeight}px`;

      pickerCanvas!.width = mainCanvas!.width;
      pickerCanvas!.height = mainCanvas!.height;
      pickerCanvas!.style.width = mainCanvas!.style.width;
      pickerCanvas!.style.height = mainCanvas!.style.height;

      // initial draw image
      drawImageOnCanvas();

      // initial color picker position
      pickerPos = {
        x: mainCanvas!.width / 2,
        y: mainCanvas!.height / 2,
      };
      updateColorPicker();
    };
    reader.readAsDataURL(file);
  });

  // 绘制图片到Canvas
  function drawImageOnCanvas() {
    if (!sourceImage || !mainCtx) return;

    const imageAspectRatio = sourceImage.width / sourceImage.height;
    const canvasAspectRatio = mainCanvas!.width / mainCanvas!.height;

    let displayWidth, displayHeight, xOffset, yOffset;

    if (imageAspectRatio > canvasAspectRatio) {
      // 图片相对更宽，以 canvas 的宽度为基准进行缩放
      displayWidth = mainCanvas!.width;
      displayHeight = displayWidth / imageAspectRatio;
    } else {
      // 图片相对更高，以 canvas 的高度为基准进行缩放
      displayHeight = mainCanvas!.height;
      displayWidth = displayHeight * imageAspectRatio;
    }

    // 计算图片在 canvas 中居中显示的偏移量
    xOffset = (mainCanvas!.width - displayWidth) / 2;
    yOffset = (mainCanvas!.height - displayHeight) / 2;

    // 绘制原始图片
    mainCtx.drawImage(
      sourceImage,
      0,
      0,
      sourceImage.width,
      sourceImage.height,
      xOffset,
      yOffset,
      displayWidth,
      displayHeight
    );
    console.log('image draw');
    
  }

  // 更新取色器
  function updateColorPicker() {
    if (!mainCtx || !sourceImage || !pickerCtx) return;

    const imageAspectRatio = sourceImage.width / sourceImage.height;
    const canvasAspectRatio = mainCanvas!.width / mainCanvas!.height;

    let displayWidth, displayHeight, xOffset, yOffset;

    if (imageAspectRatio > canvasAspectRatio) {
      // 图片相对更宽，以 canvas 的宽度为基准进行缩放
      displayWidth = mainCanvas!.width;
      displayHeight = displayWidth / imageAspectRatio;
    } else {
      // 图片相对更高，以 canvas 的高度为基准进行缩放
      displayHeight = mainCanvas!.height;
      displayWidth = displayHeight * imageAspectRatio;
    }

    // 计算图片在 canvas 中居中显示的偏移量
    xOffset = (mainCanvas!.width - displayWidth) / 2;
    yOffset = (mainCanvas!.height - displayHeight) / 2;

    // 取色
    // 计算取色点在原始图像上的坐标
    const sourceX = Math.floor(
      (pickerPos.x - xOffset) * (sourceImage.width / displayWidth)
    );
    const sourceY = Math.floor(
      (pickerPos.y - yOffset) * (sourceImage.height / displayHeight)
    );

    const tempCanvas = new OffscreenCanvas(1, 1);
    const tempCtx = tempCanvas.getContext("2d");
    tempCtx!.drawImage(sourceImage, sourceX, sourceY, 1, 1, 0, 0, 1, 1);
    const pixel = tempCtx!.getImageData(0, 0, 1, 1).data;
    const hex = `#${((1 << 24) + (pixel[0] << 16) + (pixel[1] << 8) + pixel[2]).toString(16).slice(1)}`;
    document.querySelector(".color-box").style.backgroundColor = hex;
    document.querySelector(".color-value")!.textContent = hex;
    colorValue.style.color = getComplementaryColor(hex);

    // 计算反色
    const inverseR = 255 - pixel[0];
    const inverseG = 255 - pixel[1];
    const inverseB = 255 - pixel[2];
    const inverseHex = `#${((1 << 24) + (inverseR << 16) + (inverseG << 8) + inverseB).toString(16).slice(1)}`;

    // 更新放大镜
    if (zoomCtx) {
      const zoomSize = 8 * dpr;
      zoomCtx.clearRect(0, 0, zoomCanvas!.width, zoomCanvas!.height);

      const zoomSourceX = Math.floor(
        (pickerPos.x - xOffset - zoomSize / 2) *
        (sourceImage.width / displayWidth)
      );
      const zoomSourceY = Math.floor(
        (pickerPos.y - yOffset - zoomSize / 2) *
        (sourceImage.height / displayHeight)
      );
      const zoomSourceWidth = Math.ceil(
        zoomSize * (sourceImage.width / displayWidth)
      );
      const zoomSourceHeight = Math.ceil(
        zoomSize * (sourceImage.height / displayHeight)
      );

      zoomCtx.drawImage(
        sourceImage,
        zoomSourceX,
        zoomSourceY,
        zoomSourceWidth,
        zoomSourceHeight,
        0,
        0,
        zoomCanvas!.width,
        zoomCanvas!.height
      );
    }

    // 清除取色器画布
    pickerCtx.clearRect(0, 0, pickerCanvas!.width, pickerCanvas!.height);

    // 绘制十字准星到取色器画布
    const crosshairSize = 10 * dpr;
    const lineWidth = 1 * dpr;
    pickerCtx.strokeStyle = inverseHex; // 使用反色作为准心颜色
    pickerCtx.lineWidth = lineWidth;

    // 绘制水平线段
    pickerCtx.beginPath();
    pickerCtx.moveTo(pickerPos.x - crosshairSize / 2, pickerPos.y);
    pickerCtx.lineTo(pickerPos.x + crosshairSize / 2, pickerPos.y);
    pickerCtx.stroke();

    // 绘制垂直线段
    pickerCtx.beginPath();
    pickerCtx.moveTo(pickerPos.x, pickerPos.y - crosshairSize / 2);
    pickerCtx.lineTo(pickerPos.x, pickerPos.y + crosshairSize / 2);
    pickerCtx.stroke();
  }

  // 触摸交互处理
  const touchpad = document.querySelector(".touchpad");
  let startX = 0;
  let startY = 0;

  touchpad!.addEventListener("touchstart", (e) => {
    e.preventDefault();
    startX = e.touches[0].clientX;
    startY = e.touches[0].clientY;
    isDragging = true;
  });

  touchpad!.addEventListener("touchmove", (e) => {
    if (!isDragging || !sourceImage) return;
    e.preventDefault();

    const deltaX = e.touches[0].clientX - startX;
    const deltaY = e.touches[0].clientY - startY;

    pickerPos.x = Math.min(
      Math.max(pickerPos.x + deltaX * dpr * 2, 0),
      mainCanvas!.width
    );
    pickerPos.y = Math.min(
      Math.max(pickerPos.y + deltaY * dpr * 2, 0),
      mainCanvas!.height
    );

    startX = e.touches[0].clientX;
    startY = e.touches[0].clientY;

    // 优化性能的重绘
    requestAnimationFrame(updateColorPicker);
  });

  touchpad.addEventListener("touchend", () => {
    isDragging = false;
  });

  window.addEventListener("load", initCanvas);
</script>
